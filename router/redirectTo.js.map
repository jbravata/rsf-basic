{"version":3,"sources":["../../src/router/redirectTo.js"],"names":["transformParams","redirectTo","path","type","runOn","server","client","config","routePath","status","redirect","rewrite_path_regex","responseStatus","fn","params","request","response","redirectPath","key","replace","RegExp","withStatus"],"mappings":";;;;;;;AAAA;;;;AAKA,OAAOA,eAAP,MAA4B,mBAA5B;AAEA,eAAe,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACvC,MAAMC,IAAI,GAAG,YAAb;AACA,MAAMC,KAAK,GAAG;AAAEC,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,MAAM,EAAE;AAAxB,GAAd;;AACA,MAAMC,OAAM,GAAG,SAATA,MAAS,CAACC,SAAD,EAAYC,MAAZ;AAAA,WAAwB;AACrCC,MAAAA,QAAQ;AACNC,QAAAA,kBAAkB,EAAEX,eAAe,CAACQ,SAAD,EAAYN,IAAZ;AAD7B,SAEFO,MAAM,GAAG;AAAEA,QAAAA,MAAM,EAANA;AAAF,OAAH,GAAgB,EAFpB;AAD6B,KAAxB;AAAA,GAAf;;AAMA,MAAIG,cAAc,GAAG,GAArB;;AATuC,WAWxBC,EAXwB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6BAWvC,iBAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,cAAAA,YADN,GACqBf,IADrB;;AAEE,mBAASgB,GAAT,IAAgBJ,MAAhB,EAAwB;AACtBG,gBAAAA,YAAY,GAAGA,YAAY,CAACE,OAAb,CAAqB,IAAIC,MAAJ,YAAeF,GAAf,QAAuB,GAAvB,CAArB,EAAkDJ,MAAM,CAACI,GAAD,CAAxD,CAAf;AACD;;AACDF,cAAAA,QAAQ,CAACN,QAAT,CAAkBO,YAAlB,EAAgCL,cAAhC;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXuC;AAAA;AAAA;;AAmBvC,SAAO;AACLT,IAAAA,IAAI,EAAJA,IADK;AAELI,IAAAA,MAAM,EAANA,OAFK;AAGLc,IAAAA,UAAU,EAAE,oBAAAZ,MAAM,EAAI;AACpBG,MAAAA,cAAc,GAAGH,MAAjB;AACA,aAAO;AAAEN,QAAAA,IAAI,EAAJA,IAAF;AAAQI,QAAAA,MAAM,EAAE,gBAAAC,SAAS;AAAA,iBAAID,OAAM,CAACC,SAAD,EAAYC,MAAZ,CAAV;AAAA,SAAzB;AAAwDL,QAAAA,KAAK,EAALA,KAAxD;AAA+DS,QAAAA,EAAE,EAAFA;AAA/D,OAAP;AACD,KANI;AAOLT,IAAAA,KAAK,EAALA,KAPK;AAQLS,IAAAA,EAAE,EAAFA;AARK,GAAP;AAUD","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\n\nimport transformParams from './transformParams'\n\nexport default function redirectTo(path) {\n  const type = 'redirectTo'\n  const runOn = { server: true, client: false }\n  const config = (routePath, status) => ({\n    redirect: {\n      rewrite_path_regex: transformParams(routePath, path),\n      ...(status ? { status } : {})\n    }\n  })\n  let responseStatus = 302\n\n  async function fn(params, request, response) {\n    let redirectPath = path\n    for (let key in params) {\n      redirectPath = redirectPath.replace(new RegExp(`{${key}}`, 'g'), params[key])\n    }\n    response.redirect(redirectPath, responseStatus)\n  }\n\n  return {\n    type,\n    config,\n    withStatus: status => {\n      responseStatus = status\n      return { type, config: routePath => config(routePath, status), runOn, fn }\n    },\n    runOn,\n    fn\n  }\n}\n"],"file":"redirectTo.js"}