{"version":3,"sources":["../../src/router/createCustomCacheKey.js"],"names":["flatten","QS_MODE_BLACKLIST","QS_MODE_WHITELIST","CustomCacheKey","_preventQueryParametersConflict","queryParametersMode","queryParameterslist","params","_convertArgsToArray","name","createPartitions","partitions","Partitions","headers","push","toJSON","cookies","Object","keys","add_headers","add_cookies","query_parameters_mode","query_parameters_list","queryParametersChanged","Error","args","partition","PartitionConfig","length","map","p","pattern","partitioning_regex","createCustomCacheKey"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2019 Moov Corporation.  All rights reserved.\n */\n\nimport flatten from 'lodash/flatten'\n\n/**\n * @private\n */\nconst QS_MODE_BLACKLIST = 'blacklist'\nconst QS_MODE_WHITELIST = 'whitelist'\n\nclass CustomCacheKey {\n  queryParametersMode = QS_MODE_BLACKLIST\n  queryParameterslist = []\n  queryParametersChanged = false\n\n  headers = []\n  cookies = {}\n\n  excludeAllQueryParameters() {\n    this._preventQueryParametersConflict()\n\n    this.queryParametersMode = QS_MODE_WHITELIST\n    this.queryParameterslist = []\n    return this\n  }\n\n  excludeQueryParameters(...params) {\n    this._preventQueryParametersConflict()\n\n    this.queryParametersMode = QS_MODE_BLACKLIST\n    this.queryParameterslist = this._convertArgsToArray(params)\n    return this\n  }\n\n  excludeAllQueryParametersExcept(...params) {\n    this._preventQueryParametersConflict()\n\n    this.queryParametersMode = QS_MODE_WHITELIST\n    this.queryParameterslist = this._convertArgsToArray(params)\n    return this\n  }\n\n  addHeader(name, createPartitions) {\n    if (typeof createPartitions === 'function') {\n      const partitions = new Partitions()\n      createPartitions(partitions)\n      this.headers.push({ name, partitions: partitions.toJSON() })\n    } else {\n      this.headers.push(name)\n    }\n\n    return this\n  }\n\n  addCookie(name, createPartitions) {\n    const partitions = new Partitions()\n\n    if (typeof createPartitions === 'function') {\n      createPartitions(partitions)\n    }\n\n    this.cookies[name] = partitions.toJSON()\n\n    return this\n  }\n\n  /**\n   * Returns the name of all cookies in the custom key\n   * @return {String[]}\n   */\n  getCookieNames() {\n    return Object.keys(this.cookies)\n  }\n\n  toJSON() {\n    return {\n      add_headers: this.headers,\n      add_cookies: this.cookies,\n      query_parameters_mode: this.queryParametersMode,\n      query_parameters_list: this.queryParameterslist\n    }\n  }\n\n  /**\n   * @private\n   */\n  _preventQueryParametersConflict() {\n    if (this.queryParametersChanged) {\n      throw new Error(\n        'You cannot combine multiple query params exclusion in a single custom cache key definition'\n      )\n    }\n    this.queryParametersChanged = true\n  }\n\n  /**\n   * Some function can be called with both an array or spread arguments.\n   * ex: excludeAllQueryParameters('uid', 'utm_source') or excludeAllQueryParameters([uid', 'utm_source'])\n   * @param {@} args\n   */\n  _convertArgsToArray(args) {\n    return flatten(args)\n  }\n}\n\n/**\n * @private\n */\nclass Partitions {\n  partitions = []\n  name = null\n\n  partition(name) {\n    const partition = new PartitionConfig(name)\n    this.partitions.push(partition)\n    return partition\n  }\n\n  toJSON() {\n    if (this.partitions.length === 0) {\n      return null\n    } else {\n      return this.partitions.map(p => p.toJSON())\n    }\n  }\n}\n\n/**\n * @private\n */\nclass PartitionConfig {\n  pattern = null\n  name = null\n\n  constructor(name) {\n    this.name = name\n  }\n\n  byPattern(pattern) {\n    this.pattern = pattern\n  }\n\n  toJSON() {\n    return {\n      partition: this.name,\n      partitioning_regex: this.pattern\n    }\n  }\n}\n\n/**\n * Returns a DSL for creating custom server cache keys based on cookies, query parameters, and\n * request headers.\n *\n * example:\n *\n * ```js\n *  new Router()\n *    .get('/s/:id',\n *      cache({\n *        edge: {\n *          key: createCustomCacheKey()\n *            .addHeader('user-agent')\n *            .excludeQueryParameters(['uid'])\n *            .addCookie('location', cookie => {\n *              cookie.partition('na').byPattern('us|ca')\n *              cookie.partition('eur').byPattern('de|fr|ee')\n *            })\n *        }\n *      })\n *    )\n * ```\n */\nexport default function createCustomCacheKey() {\n  return new CustomCacheKey()\n}\n"],"file":"createCustomCacheKey.js"}