{"version":3,"sources":["../../src/router/serviceWorker.js"],"names":["installed","messageSW","params","navigator","serviceWorker","controller","postMessage","e","console","warn","cache","path","cacheData","waitForServiceWorkerController","window","moov","apiVersion","router","willCacheOnClient","action","prefetchJsonFor","includeSSR","startsWith","url","URL","origin","pathname","search","prefetch","abortPrefetches","resumePrefetches","configureCache","options","clearCache","caches","keys","key","delete","Promise","resolve","ready","then","addEventListener","catch","removeOldCaches","isServiceWorkerReady","isInstalled"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright © 2017-2019 Moov Corporation.  All rights reserved.\n */\nlet installed = false\n\n/**\n * @license\n * Copyright © 2017-2019 Moov Corporation.  All rights reserved.\n */\n\nfunction messageSW(params) {\n  try {\n    navigator.serviceWorker.controller.postMessage(params)\n  } catch (e) {\n    console.warn('Could not message Service Worker', e)\n  }\n}\n\n/**\n * Cache content using the service worker.  If content is not supplied, the service worker will fetch\n * the content from the server\n * @param {String} path The URI path of the request\n * @param {String} cacheData The data to cache\n */\nexport async function cache(path, cacheData) {\n  if (await waitForServiceWorkerController()) {\n    const { apiVersion } = window.moov || {}\n\n    if (window.moov.router && !window.moov.router.willCacheOnClient({ path })) {\n      // Never cache a path unless it matches a route with a cache handler\n      // otherwise we could wind up caching pages like the cart that are not cacheable\n      return\n    }\n\n    if (cacheData) {\n      messageSW({\n        action: 'cache-state',\n        path,\n        apiVersion,\n        cacheData\n      })\n    } else {\n      messageSW({ action: 'cache-path', path, apiVersion })\n    }\n  }\n}\n\n/**\n * Prefetches and caches JSON for the specified path\n * @param {String} path A URL path for a page (without .json)\n */\nexport async function prefetchJsonFor(path, includeSSR) {\n  if (!path) {\n    return\n  }\n  if (path.startsWith('http')) {\n    const url = new URL(path)\n    cache(`${url.origin}${url.pathname}.json${url.search}`)\n  } else {\n    const url = new URL(`http://z.z${path}`)\n    cache(`${url.pathname}.json${url.search}`)\n  }\n  if (includeSSR) {\n    cache(path)\n  }\n}\n\n/**\n * Prefetches and caches SSR and JSON for the specified path\n * @param {String} path A URL path for a page (without .json)\n */\nexport function prefetch(path) {\n  cache(path)\n  prefetchJsonFor(path)\n}\n\n/**\n * Aborts all in progress prefetches.  Call this function to prevent prefetching from blocking\n * more important requests, like page navigation.\n */\nexport async function abortPrefetches() {\n  if (await waitForServiceWorkerController()) {\n    messageSW({ action: 'abort-prefetches' })\n  }\n}\n\n/**\n * Resume queued prefetch requests which were cancelled to allow for more important requests\n */\nexport async function resumePrefetches() {\n  if (await waitForServiceWorkerController()) {\n    messageSW({ action: 'resume-prefetches' })\n  }\n}\n\n/**\n * Configures runtime caching options\n * @private\n * @param {Object} options\n * @param {Object} options.cacheName The name of the runtime cache\n * @param {Object} options.maxEntries The max number of entries to store in the cache\n * @param {Object} options.maxAgeSeconds The TTL in seconds for entries\n */\nexport async function configureCache(options) {\n  if (await waitForServiceWorkerController()) {\n    messageSW({ action: 'configure-runtime-caching', options })\n  }\n}\n\n/**\n * Clears all API and SSR responses from the client cache\n * @return {Promise} Resolved once all caches have b\n */\nexport async function clearCache() {\n  if ('caches' in window) {\n    const keys = await caches.keys()\n\n    for (let key of keys) {\n      if (!key.startsWith('workbox-precache')) {\n        await caches.delete(key)\n      }\n    }\n  }\n}\n\n/**\n * Resolves when the service worker has been installed\n * @private\n */\nexport async function waitForServiceWorkerController() {\n  if (!navigator.serviceWorker) {\n    return false\n  }\n\n  return new Promise(resolve => {\n    navigator.serviceWorker.ready\n      .then(() => {\n        if (navigator.serviceWorker.controller) {\n          return resolve(true)\n        }\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n          resolve(true)\n        })\n      })\n      // According to specs this should never reject. However, FF does reject when the setting\n      // to clear cache after window close is enabled\n      .catch(() => resolve(false))\n  })\n}\n\n/**\n * Removes runtime caches for old versions of the api.  This ensures that all responses\n * are appropriate for the current version of the UI.\n * @private\n */\nexport async function removeOldCaches() {\n  if (await waitForServiceWorkerController()) {\n    if (window.moov && window.moov.apiVersion) {\n      messageSW({\n        action: 'remove-old-caches',\n        apiVersion: window.moov.apiVersion\n      })\n    }\n  }\n}\n\nexport function isServiceWorkerReady() {\n  return installed\n}\n\nexport default {\n  removeOldCaches,\n  waitForServiceWorkerController,\n  configureCache,\n  resumePrefetches,\n  abortPrefetches,\n  prefetch,\n  prefetchJsonFor,\n  isServiceWorkerReady,\n  cache\n}\n\nif (typeof window !== 'undefined') {\n  waitForServiceWorkerController().then(isInstalled => {\n    installed = isInstalled\n  })\n}\n"],"file":"serviceWorker.js"}