{"version":3,"sources":["../../src/router/proxyUpstream.js"],"names":["RESPONSE_TYPE","HANDLER","perfectProxy","_params","_request","response","send","proxyUpstream","cb","type","runOn","server","client","fn","params","request","process","env","MOOV_RUNTIME","window","location","reload","Error","set","path"],"mappings":";;;;AAAA;;;;AAIA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,WAAvC,C,CAEA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAUC,QAAV,EAAoBC,QAApB;AAAA,SAAiCA,QAAQ,CAACC,IAAT,EAAjC;AAAA,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,eAAe,SAASC,aAAT,GAA0C;AAAA,MAAnBC,EAAmB,uEAAdN,YAAc;AACvD,SAAO;AACLO,IAAAA,IAAI,EAAE,eADD;AAELC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,IADH;AAELC,MAAAA,MAAM,EAAE;AAFH,KAFF;AAMLC,IAAAA,EAAE;AAAA;AAAA;AAAA,+BAAE,iBAAOC,MAAP,EAAeC,OAAf,EAAwBV,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,sBACEW,OAAO,CAACC,GAAR,CAAYC,YAAZ,KAA6B,QAD/B;AAAA;AAAA;AAAA;;AAEA;AACAC,gBAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAHA;AAAA;;AAAA;AAAA,sBAKIb,EAAE,IAAI,IALV;AAAA;AAAA;AAAA;;AAAA,sBAMQ,IAAIc,KAAJ,CACJ,qFADI,CANR;;AAAA;AASA;AACAjB,gBAAAA,QAAQ,CAACkB,GAAT,CAAatB,OAAb,EAAsBO,EAAE,CAACgB,IAAzB;AACAnB,gBAAAA,QAAQ,CAACkB,GAAT,CAAavB,aAAb,EAA4B,OAA5B;AAXA;AAAA,uBAYcQ,EAAE,CAACM,MAAD,EAASC,OAAT,EAAkBV,QAAlB,CAZhB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,8BAYgD;AAAEE,kBAAAA,aAAa,EAAE;AAAjB,iBAZhD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANG,GAAP;AAsBD","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\nimport { RESPONSE_TYPE, HANDLER } from './headers'\n\n// The default callback used when none is provided.  Simply returns the upstream HTML unaltered.\nconst perfectProxy = (_params, _request, response) => response.send()\n\n/**\n * A handler that fetches HTML from the same path as the current request on the upstream site. Use\n * this handler to transform HTML from the upstream site or return it unaltered.\n * To relay the response from the upstream site unaltered, call `response.send()` with no arguments.\n *\n * Example - Using a handler to transform the HTML from the proxied site:\n *\n * ```js\n * // src/routes.js\n * import { Router, proxyUpstream } from 'react-storefront/router'\n *\n * export default new Router()\n *   .get('/some-page',\n *     proxyUpstream('./proxy/proxy-handler')\n *   )\n * ```\n *\n * ```js\n * // src/proxy/proxy-handler.js\n * import getStats from 'react-storefront-stats'\n *\n * export default async function proxyHandler(params, request, response) {\n *   const contentType = global.env.content_type || ''\n *\n *   if (contentType.indexOf('html') > -1) {\n *     const stats = await getStats()\n *     fns.init$(body)\n *\n *     // ... alter the response HTML received from the upstream site here by calling functions on $. ...\n *\n *     response.send($.html())\n *   } else {\n *     response.send()\n *   }\n * }\n * ```\n *\n * Example - returning the HTML from the upstream site unaltered:\n *\n * ```js\n * // src/routes.js\n * import { Router, proxyUpstream } from 'react-storefront/router'\n *\n * export default new Router()\n *   .get('/some-page',\n *     proxyUpstream()\n *   )\n * ```\n *\n * @param {Function} cb A function to call after the response has been received from the upstream site.\n * @param {Object} cb.params Request parameters parsed from the route and query string\n * @param {Request} cb.request An object representing the request\n * @param {Response} cb.response An object representing the response.  Call `response.send(html)` to send the resulting html back to the browser.\n */\nexport default function proxyUpstream(cb = perfectProxy) {\n  return {\n    type: 'proxyUpstream',\n    runOn: {\n      server: true,\n      client: true\n    },\n    fn: async (params, request, response) => {\n      if (process.env.MOOV_RUNTIME === 'client') {\n        // reload the page if this handler is called during client-side navigation\n        window.location.reload()\n      } else {\n        if (cb == null)\n          throw new Error(\n            'You must provide a path to a handler in proxyUpstream().  Please check your routes.'\n          )\n        // indicate handler path and asset class in a response header so we can track it in logs\n        response.set(HANDLER, cb.path)\n        response.set(RESPONSE_TYPE, 'proxy')\n        return (await cb(params, request, response)) || { proxyUpstream: true }\n      }\n    }\n  }\n}\n"],"file":"proxyUpstream.js"}