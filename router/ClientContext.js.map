{"version":3,"sources":["../../src/router/ClientContext.js"],"names":["ClientContext","shouldCache","Error","clientCache"],"mappings":";;;;AAAA;;;;;AAIA;;;IAGqBA,a;;;;;;yCAIL,S;;;;;;AAEd;;;;;kCAKcC,W,EAAa;AACzB,UAAIA,WAAW,IAAI,IAAnB,EACE,MAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACF,WAAKC,WAAL,GAAmBF,WAAW,GAAG,aAAH,GAAmB,SAAjD;AACA,aAAO,IAAP;AACD,K,CAED;AACA;;;;6BACS,CAAE;;;0BACL,CAAE;;;+BACG,CAAE;;;0BACP,CAAE;;;6BACC,CAAE;;;;;;SAxBQD,a","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\n/**\n * @private\n */\nexport default class ClientContext {\n  /**\n   * The setting for service-worker caching\n   */\n  clientCache = 'default'\n\n  /**\n   * Controls caching in the service worker\n   * @param {Boolean} shouldCache Set to true to cache the response on the client\n   * @return {Response} this\n   */\n  cacheOnClient(shouldCache) {\n    if (shouldCache == null)\n      throw new Error('shouldCache cannot be null in call to response.cacheOnClient')\n    this.clientCache = shouldCache ? 'force-cache' : 'default'\n    return this\n  }\n\n  // Since this object is used in place of the Response on the client, we stub out Responses's methods\n  // to prevent errors on the client in isomorphic handlers\n  status() {}\n  set() {}\n  redirect() {}\n  get() {}\n  cookie() {}\n}\n"],"file":"ClientContext.js"}