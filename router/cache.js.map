{"version":3,"sources":["../../src/router/cache.js"],"names":["SURROGATE_KEY","cache","edge","server","client","console","warn","type","runOn","fn","params","request","response","process","env","MOOV_RUNTIME","MOOV_ENV","method","toLowerCase","Error","cacheOnClient","maxAgeSeconds","shouldSendCookies","key","getCookieNames","relayUpstreamCookies","cacheOnServer","surrogateKey","set"],"mappings":"AAAA;;;;AAKA,SAASA,aAAT,QAA8B,WAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,eAAe,SAASC,KAAT,OAAyC;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACtD,MAAID,MAAJ,EACEE,OAAO,CAACC,IAAR,CACE,sLADF;AAIF,MAAI,CAACJ,IAAL,EAAWA,IAAI,GAAGC,MAAP,CAN2C,CAM7B;;AAEzB,SAAO;AACLI,IAAAA,IAAI,EAAE,OADD;AAELH,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,IAAI,EAAJA,IAHK;AAILC,IAAAA,MAAM,EAAED,IAJH;AAKLM,IAAAA,KAAK,EAAE;AACLL,MAAAA,MAAM,EAAE,IADH;AAELC,MAAAA,MAAM,EAAE;AAFH,KALF;AASLK,IAAAA,EAAE,EAAE,YAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA+B;AACjC,UACEC,OAAO,CAACC,GAAR,CAAYC,YAAZ,KAA6B,QAA7B,IACAF,OAAO,CAACC,GAAR,CAAYE,QAAZ,KAAyB,aADzB,IAEAL,OAAO,CAACM,MAAR,CAAeC,WAAf,OAAiC,KAHnC,EAIE;AACA,cAAM,IAAIC,KAAJ,4CAEFR,OAAO,CAACM,MAFN,gDAAN;AAKD;;AAED,UAAIJ,OAAO,CAACC,GAAR,CAAYC,YAAZ,KAA6B,QAAjC,EAA2C;AACzC,YAAIX,MAAJ,EAAY;AACVQ,UAAAA,QAAQ,CAACQ,aAAT,CAAuB,IAAvB;AACD;AACF,OAJD,MAIO,IAAIlB,IAAJ,EAAU;AACf,YAAIA,IAAI,CAACmB,aAAT,EAAwB;AACtB;AACAP,UAAAA,GAAG,CAACQ,iBAAJ,GACEpB,IAAI,CAACqB,GAAL,IAAYrB,IAAI,CAACqB,GAAL,CAASC,cAArB,GAAsCtB,IAAI,CAACqB,GAAL,CAASC,cAAT,EAAtC,GAAkE,KADpE;AAGAZ,UAAAA,QAAQ,CAACa,oBAAT,CAA8B,KAA9B;AACAb,UAAAA,QAAQ,CAACc,aAAT,CAAuBxB,IAAI,CAACmB,aAA5B;AACD;;AAED,YAAI,OAAOnB,IAAI,CAACyB,YAAZ,KAA6B,UAAjC,EAA6C;AAC3Cf,UAAAA,QAAQ,CAACgB,GAAT,CAAa5B,aAAb,EAA4BE,IAAI,CAACyB,YAAL,CAAkBjB,MAAlB,EAA0BC,OAA1B,CAA5B;AACD;AACF;AACF;AAxCI,GAAP;AA0CD","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\n\nimport { SURROGATE_KEY } from './headers'\n\n/**\n * Specifies that the result of a route should be cached.  This handler must come before fromServer.\n *\n * Example:\n *\n * ```js\n * router.get('/p/:id',\n *   cache({\n *     edge: {\n *       maxAgeSeconds: 300 // cache for 5 minutes on the edge,\n *       key: createCustomCacheKey() // split cache by user-agent header, currency, and location (with bucketing), and exclude the ?uid search parameter from the cache key\n *         .addHeader('user-agent')\n *         .excludeQueryParameters(['uid'])\n *         .addCookie('currency')\n *         .addCookie('location', cookie => {\n *           cookie.partition('na').byPattern('us|ca')\n *           cookie.partition('eur').byPattern('de|fr|ee')\n *         })\n *     },\n *     client: true // cache in the service worker based on the settings passed to router.configureClientCache()\n *   })\n *   fromClient({ view: 'Product' }),\n *   fromServer('./product.js'),\n * )\n * ```\n *\n * @param {Object} options\n * @param {Number} options.edge\n * @param {Number} options.edge.maxAgeSeconds The number of seconds the result should be cached on\n *  the server.  The maxAgeSeconds key is required when specifying a server config.\n * @param {Object} options.edge.key A custom cache key to override the default caching behavior.  Use `createCustomCacheKey()` to split the cache by\n *  headers and cookies, and/or normalize the cache by removing specific query parameters.\n * @param {Function} options.edge.surrogateKey A function that is passed the route params and the request and returns a surrogate key under which to cache the response.\n * @param {Boolean} options.client Set to true to cache on the client based on the configuration defined\n *  by router.configureClientCache(). Defaults to false.\n * @return {Object}\n */\nexport default function cache({ edge, server, client }) {\n  if (server)\n    console.warn(\n      'Deprecation warning: cache({ server }) is deprecated in favor of cache({ edge }) and will be removed in a future version of React Storefront.  Please update your Router definition.'\n    )\n\n  if (!edge) edge = server // provide backwards compatibility for server, which we've renamed edge\n\n  return {\n    type: 'cache',\n    client,\n    edge,\n    server: edge,\n    runOn: {\n      server: true,\n      client: true\n    },\n    fn: (params, request, response) => {\n      if (\n        process.env.MOOV_RUNTIME === 'server' &&\n        process.env.MOOV_ENV === 'development' &&\n        request.method.toLowerCase() !== 'get'\n      ) {\n        throw new Error(\n          `Invalid use of cache handler for ${\n            request.method\n          } request. Only GET requests can be cached.`\n        )\n      }\n\n      if (process.env.MOOV_RUNTIME === 'client') {\n        if (client) {\n          response.cacheOnClient(true)\n        }\n      } else if (edge) {\n        if (edge.maxAgeSeconds) {\n          // For fetch to read\n          env.shouldSendCookies =\n            edge.key && edge.key.getCookieNames ? edge.key.getCookieNames() : false\n\n          response.relayUpstreamCookies(false)\n          response.cacheOnServer(edge.maxAgeSeconds)\n        }\n\n        if (typeof edge.surrogateKey === 'function') {\n          response.set(SURROGATE_KEY, edge.surrogateKey(params, request))\n        }\n      }\n    }\n  }\n}\n"],"file":"cache.js"}