{"version":3,"sources":["../src/Image.js"],"names":["React","Component","createRef","withStyles","PropTypes","inject","classnames","VisibilitySensor","createOptimizedSrc","styles","theme","root","position","display","alignItems","justifyContent","minHeight","minWidth","fit","top","left","right","bottom","width","height","contain","objectFit","maxHeight","maxWidth","fill","Image","name","app","amp","lazy","setState","primaryNotFound","visible","state","loaded","ref","img","current","complete","naturalWidth","handleNotFound","props","lazyOffset","notFoundSrc","quality","classes","className","aspectRatio","alt","src","optimize","imgAttributes","getOptimizedSrc","assignedAttributes","key","ampLayout","result","paddingTop","lazyLoad","options","string","number","bool","shape","format","oneOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\nimport React, { Component, createRef } from 'react'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport PropTypes from 'prop-types'\nimport { inject } from 'mobx-react'\nimport classnames from 'classnames'\nimport VisibilitySensor from 'react-visibility-sensor'\nimport { createOptimizedSrc } from './imageService'\n\nexport const styles = theme => ({\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    // Without a minimum height and width, the container will not fire\n    // the visibility change\n    minHeight: 1,\n    minWidth: 1\n  },\n  fit: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: 'block',\n    width: '100%',\n    height: '100%'\n  },\n  contain: {\n    '& img': {\n      objectFit: 'contain',\n      maxHeight: '100%',\n      maxWidth: '100%'\n    }\n  },\n  fill: {\n    '& img': {\n      display: 'block',\n      objectFit: 'contain',\n      maxHeight: '100%',\n      maxWidth: '100%',\n      width: '100%',\n      height: '100%'\n    }\n  }\n})\n\n/**\n * Provide amp-compatible mobile-optimized images that can be made to auto-scale to fit the parent element\n * by setting the `fill` prop, or grow/shrink while maintaining a given aspect ratio\n * by setting the `aspectRatio` prop.\n */\n@withStyles(styles, { name: 'RSFImage' })\n@inject(({ app }) => ({ amp: app.amp }))\nexport default class Image extends Component {\n  static propTypes = {\n    /**\n     * The URL for the image\n     */\n    src: PropTypes.string,\n\n    /**\n     * The URL of the image to use in case the primary image fails to load\n     */\n    notFoundSrc: PropTypes.string,\n\n    /**\n     * The ratio of height/width as a float.  For example: 1 when the height and width match,\n     * 0.5 when height is half of the width.\n     */\n    aspectRatio: PropTypes.number,\n\n    /**\n     * The quality of image to retrieve from 0 to 100\n     */\n    quality: PropTypes.number,\n\n    /**\n     * Set to true to apply object-fit:contain to the image so that it automatically\n     * fits within the element's height and width.\n     */\n    contain: PropTypes.bool,\n\n    /**\n     * The same as contain, except images are stretched to fill the element's height and width.\n     */\n    fill: PropTypes.bool,\n\n    /**\n     * Set to true to wait until the image enters the viewport before loading it.\n     */\n    lazy: PropTypes.bool,\n\n    /**\n     * Sets the minimum amount of pixels the image can be scrolled out of view before it\n     * is lazy loaded.  Defaults to 100.  You must set `lazy` in order for this setting to take effect.\n     */\n    lazyOffset: PropTypes.number,\n\n    /**\n     * When specified, the image will be optimized for mobile devices by the Moovweb CDN.  Accepts the following keys:\n     *\n     * - quality  - A number or string containing the number for the desired quality, on a scale from 1 (worst) to 100 (best).\n     * - width - A number or string containing the number for the desired pixel width.\n     * - height - A number or string containing the number for the desired pixel height.\n     * - format - A string containing the desired file format. Accepts \"webp\" or \"jpeg\".\n     */\n    optimize: PropTypes.shape({\n      quality: PropTypes.number,\n      width: PropTypes.number,\n      height: PropTypes.number,\n      format: PropTypes.oneOf(['webp', 'jpeg'])\n    })\n  }\n\n  static defaultProps = {\n    quality: null,\n    contain: false,\n    fill: false,\n    lazy: false,\n    lazyOffset: 100,\n    optimize: {}\n  }\n\n  constructor({ lazy, amp }) {\n    super()\n\n    this.state = {\n      loaded: !lazy || amp,\n      primaryNotFound: false\n    }\n\n    this.ref = createRef()\n  }\n\n  componentDidMount() {\n    const img = this.ref.current\n\n    if (img && img.complete && img.naturalWidth === 0) {\n      this.handleNotFound()\n    }\n  }\n\n  render() {\n    let {\n      lazy,\n      lazyOffset,\n      notFoundSrc,\n      height,\n      width,\n      quality,\n      amp,\n      fill,\n      contain,\n      classes,\n      className,\n      aspectRatio,\n      alt,\n      src,\n      optimize,\n      ...imgAttributes\n    } = this.props\n\n    if (src == null) return null\n\n    const { loaded, primaryNotFound } = this.state\n\n    contain = contain || aspectRatio\n\n    // Overriding `src` prop if `quality` was set\n    src = this.getOptimizedSrc()\n\n    if (primaryNotFound && notFoundSrc) {\n      src = notFoundSrc\n    }\n\n    const assignedAttributes = {\n      src,\n      key: src,\n      [amp ? 'class' : 'className']: classnames({\n        [classes.fit]: aspectRatio != null\n      }),\n      layout: amp ? this.ampLayout() : null,\n      height,\n      width,\n      alt,\n      'amp-bind': imgAttributes['amp-bind']\n    }\n\n    let result = (\n      <div\n        className={classnames(className, {\n          [classes.root]: true,\n          [classes.contain]: contain,\n          [classes.fill]: fill\n        })}\n      >\n        {aspectRatio && <div style={{ paddingTop: `${aspectRatio}%` }} />}\n        {amp ? (\n          <amp-img {...assignedAttributes} />\n        ) : (\n          loaded && (\n            <img\n              ref={this.ref}\n              {...assignedAttributes}\n              {...imgAttributes}\n              onError={this.handleNotFound}\n            />\n          )\n        )}\n      </div>\n    )\n\n    if (!amp && lazy) {\n      result = (\n        <VisibilitySensor\n          active={!loaded}\n          onChange={this.lazyLoad}\n          partialVisibility\n          offset={{\n            top: -lazyOffset,\n            bottom: -lazyOffset,\n            left: -lazyOffset,\n            right: -lazyOffset\n          }}\n        >\n          {result}\n        </VisibilitySensor>\n      )\n    }\n\n    return result\n  }\n\n  ampLayout() {\n    const { fill, contain, aspectRatio } = this.props\n\n    if (contain || fill || aspectRatio) {\n      return 'fill'\n    } else {\n      return 'intrinsic'\n    }\n  }\n\n  handleNotFound = () => {\n    this.setState({ primaryNotFound: true })\n  }\n\n  lazyLoad = visible => {\n    if (!this.state.loaded && visible) {\n      this.setState({ loaded: true })\n    }\n  }\n\n  getOptimizedSrc() {\n    const { src, quality, optimize } = this.props\n    return Image.getOptimizedSrc(src, quality, optimize)\n  }\n\n  static getOptimizedSrc(src, quality, optimize = {}) {\n    const options = { ...optimize }\n    if (quality) options.quality = quality\n    return createOptimizedSrc(src, options)\n  }\n}\n"],"file":"Image.js"}